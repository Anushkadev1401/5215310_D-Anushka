#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();

/*
 * Complete the 'isValid' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts STRING s as parameter.
 */

/*
 * To return the string from the function, you should either do static allocation or dynamic allocation
 *
 * For example,
 * char* return_string_using_static_allocation() {
 *     static char s[] = "static allocation of string";
 *
 *     return s;
 * }
 *
 * char* return_string_using_dynamic_allocation() {
 *     char* s = malloc(100 * sizeof(char));
 *
 *     s = "dynamic allocation of string";
 *
 *     return s;
 * }
 *
 */
char* isValid(char* s) {
    static char yes[] = "YES";
    static char no[] = "NO";

    int freq[26] = {0};
    int len = strlen(s);

    // Count frequencies of each character
    for (int i = 0; i < len; i++) {
        freq[s[i] - 'a']++;
    }

    // Count non-zero frequencies
    int freqCount[26] = {0};
    int uniqueFreq[26] = {0};
    int k = 0;

    for (int i = 0; i < 26; i++) {
        if (freq[i] > 0) {
            int found = 0;
            for (int j = 0; j < k; j++) {
                if (uniqueFreq[j] == freq[i]) {
                    freqCount[j]++;
                    found = 1;
                    break;
                }
            }
            if (!found) {
                uniqueFreq[k] = freq[i];
                freqCount[k] = 1;
                k++;
            }
        }
    }

    // If only one unique frequency, it's valid
    if (k == 1) return yes;

    // If more than 2 unique frequencies, invalid
    if (k > 2) return no;

    // Case when there are exactly 2 different frequencies
    int f1 = uniqueFreq[0], c1 = freqCount[0];
    int f2 = uniqueFreq[1], c2 = freqCount[1];

    // One frequency is 1 and occurs only once
    if ((f1 == 1 && c1 == 1) || (f2 == 1 && c2 == 1)) return yes;

    // Frequencies differ by 1 and higher freq occurs once
    if ((abs(f1 - f2) == 1) && ((f1 > f2 && c1 == 1) || (f2 > f1 && c2 == 1))) 
        return yes;

    return no;
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char* s = readline();

    char* result = isValid(s);

    fprintf(fptr, "%s\n", result);

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!data) {
            data = '\0';

            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);

        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);

        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}


